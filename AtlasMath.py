import numpy as np

################################
class Weighting:

    @staticmethod
    def GenerateWeights( data, stdev, center ):
        weights = []
        running_sum = 0
        for value in data:
            w = np.exp(((value - center)**2)/(2*(stdev**2)))
            weights.extend([w])
            running_sum = running_sum + w
        return weights/running_sum


################################
class BandFlag:

    @staticmethod
    def Indicator( function, bandset ):
        '''
        returns 1 if the function is within the band 
        generated by the bandset for all x. 0 otherwise
        '''
        for x in range(len(function)):
            bandRange = BandFlag.BandBounds(bandset, x)
            if function[x] < bandRange[0] or function[x] > bandRange[1]:
                return 0.0
        return 1


    @staticmethod
    def Proportion( function, bandset ):
        '''
        return the proportion of the domain where 
        function is betwen the band values
        '''
        proportion = 0.0
        for x in range(len(function)):
            bandRange = BandFlag.BandBounds(bandset, x)
            if (bandRange[0] <= function[x]) and (bandRange[1] >= function[x]):
                proportion = proportion + 1.0
        return proportion/len(function) 


    @staticmethod
    def BandBounds( bandset, x ):
        minVal = float("inf")
        maxVal = float("-inf")

        for function in bandset:
            if function[x] < minVal:
                minVal = function[x]
            if function[x] > maxVal:
                maxVal = function[x]

        return [minVal, maxVal]

################################
class BandDepth:

    @staticmethod
    def IndicatorBandDepth( function, functionset, j=2 ):
        pass

    @staticmethod
    def ProportionalBandDepth( function, functionset, j=2 ):
        pass

    @staticmethod
    def WeightedIndicatorBandDepth( function, functionset, weights, j=2 ):
        pass

    @staticmethod
    def WeightedProportionalBandDepth( function, functionset, weights, j=2 ):
        pass

